{"version":3,"sources":["models/CanvasItemHistory.ts","Canvas/index.tsx","utills/uuidv4.ts","models/CanvasItemModel.ts","models/MockItems.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["_history","_defaultSnapshot","Map","items","itemsStates","forEach","item","key","set","getState","this","push","pop","length","Canvas","rest","useState","selectedItems","setSelectedItems","clickedCord","setClickedCord","isDragging","setDraggingState","rerenderInterval","setRerenderInterval","canvasItems","setCanvasItems","useEffect","canvasRef","useRef","getCanvasContext","useCallback","canvas","current","context","getContext","drawObjects","clearRect","width","height","object","beginPath","fillStyle","color","shadowColor","shadowBlur","has","id","fill","path","closePath","start","window","setInterval","save","CanvasItemHistory","saveState","undo","states","getRecentStates","state","get","restoreState","useLayoutEffect","setClickStartingPoint","stop","clearInterval","reset","cleanHistory","defaultSnapshot","handleUndo","handleReset","setDefaultSnapshot","checkIfItemInLocation","event","cbOnObject","cbNotOnObject","isPointInPath","offsetX","offsetY","handleAddOnClick","startDragging","onMouseMove","moveItem","onMouseDown","ctrlKey","allItems","clear","onMouseUp","clearClickStartingPoint","addEventListener","removeEventListener","className","ref","onClick","uuidv4","replace","c","r","Math","random","toString","CanvasItemModel","x","y","_xLoc","_yLoc","_scale","_path","_color","_id","_dClickX","_dClickY","_movePath","transformMatrix","DOMMatrix","e","f","Path2D","addPath","xLoc","yLoc","rectang1","rect","circl1","arc","PI","circl2","circl3","eleps","ellipse","eleps2","mockItems","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07db3bfb.chunk.js","sourcesContent":["import CanvasItemModel from './CanvasItemModel';\nimport { CanvasItemState } from '../types';\n\nclass CanvasItemHistory {\n  private _history: Map<number, CanvasItemState>[] = [];\n  private _defaultSnapshot: Map<number, CanvasItemState> = new Map<\n    number,\n    CanvasItemState\n  >();\n\n  saveState(items: CanvasItemModel[]) {\n    const itemsStates = new Map<number, CanvasItemState>();\n    items.forEach((item, key) => {\n      itemsStates.set(key, item.getState());\n    });\n    this._history.push(itemsStates);\n  }\n\n  getRecentStates() {\n    return this._history.pop();\n  }\n\n  setDefaultSnapshot(items: CanvasItemModel[]) {\n    const itemsStates = new Map<number, CanvasItemState>();\n    items.forEach((item, key) => {\n      itemsStates.set(key, item.getState());\n    });\n    this._defaultSnapshot = itemsStates;\n  }\n\n  get defaultSnapshot() {\n    return this._defaultSnapshot;\n  }\n\n  cleanHistory() {\n    this._history = [];\n  }\n\n  isHistoryEmpty() {\n    return !this._history.length;\n  }\n}\n\nexport default new CanvasItemHistory();\n","import {\n  HTMLAttributes,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState\n} from 'react';\nimport './styles.scss';\nimport CanvasItemModel from '../models/CanvasItemModel';\nimport CanvasItemHistory from '../models/CanvasItemHistory';\nimport 'normalize.css';\nimport { Map } from 'immutable';\n\ninterface CanvasProps extends HTMLAttributes<HTMLCanvasElement> {\n  items: CanvasItemModel[];\n}\n\nfunction Canvas({ items, ...rest }: CanvasProps): JSX.Element {\n  const [selectedItems, setSelectedItems] = useState<\n    Map<string, CanvasItemModel>\n  >(Map<string, CanvasItemModel>());\n  const [clickedCord, setClickedCord] = useState<[number, number]>([0, 0]);\n  const [isDragging, setDraggingState] = useState<boolean>(false);\n  const [rerenderInterval, setRerenderInterval] = useState<number>();\n\n  const [canvasItems, setCanvasItems] = useState<CanvasItemModel[]>(\n    items || []\n  );\n\n  useEffect(() => {\n    setCanvasItems(items);\n  }, [items]);\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const getCanvasContext = useCallback(() => {\n    const canvas = canvasRef.current as HTMLCanvasElement;\n    const context = canvas.getContext('2d') as CanvasRenderingContext2D;\n    return { canvas, context };\n  }, [canvasRef]);\n\n  const drawObjects = useCallback(() => {\n    const { context, canvas } = getCanvasContext();\n\n    const drawObject = (object: CanvasItemModel): void => {\n      context.beginPath();\n      context.fillStyle = object.color;\n      context.shadowColor = object.color;\n      context.shadowBlur = selectedItems.has(object.id) ? 16 : 0;\n      context.fill(object.path);\n      context.closePath();\n    };\n\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    canvasItems.forEach((item) => drawObject(item));\n  }, [getCanvasContext, canvasItems, selectedItems]);\n\n  const start = useCallback(() => {\n    setRerenderInterval(\n      window.setInterval(() => {\n        drawObjects();\n      }, 17)\n    );\n  }, [drawObjects]);\n\n  const save = useCallback(() => {\n    CanvasItemHistory.saveState(canvasItems);\n  }, [canvasItems]);\n\n  const undo = useCallback(() => {\n    const states = CanvasItemHistory.getRecentStates();\n    canvasItems.forEach((item, key) => {\n      const state = states?.get(key);\n      if (state) {\n        item.restoreState(state);\n      }\n    });\n  }, [canvasItems]);\n\n  useLayoutEffect(() => {\n    if (clickedCord[0] && clickedCord[1]) {\n      selectedItems.forEach((item) => {\n        item.setClickStartingPoint(...clickedCord);\n      });\n    }\n  }, [selectedItems, clickedCord]);\n\n  const stop = useCallback(() => {\n    window.clearInterval(rerenderInterval);\n    drawObjects();\n  }, [rerenderInterval, drawObjects]);\n\n  const reset = useCallback(() => {\n    CanvasItemHistory.cleanHistory();\n    const states = CanvasItemHistory.defaultSnapshot;\n    canvasItems.forEach((item, key) => {\n      const state = states?.get(key);\n      if (state) {\n        item.restoreState(state);\n      }\n    });\n  }, [canvasItems]);\n\n  const handleUndo = useCallback(() => {\n    undo();\n    drawObjects();\n  }, [drawObjects, undo]);\n\n  const handleReset = useCallback(() => {\n    reset();\n    drawObjects();\n  }, [drawObjects, reset]);\n\n  useEffect(() => {\n    drawObjects();\n    CanvasItemHistory.setDefaultSnapshot(canvasItems);\n  }, []);\n\n  const checkIfItemInLocation = useCallback(\n    (event: MouseEvent, cbOnObject: Function, cbNotOnObject?: Function) => {\n      const { context } = getCanvasContext();\n      for (let item of canvasItems) {\n        if (context.isPointInPath(item.path, event.offsetX, event.offsetY)) {\n          return cbOnObject(event, item);\n        }\n      }\n      if (cbNotOnObject) {\n        cbNotOnObject(event);\n      }\n    },\n    [canvasItems, getCanvasContext]\n  );\n\n  const handleAddOnClick = useCallback(\n    (event: MouseEvent) => {\n      const { context } = getCanvasContext();\n      for (let item of canvasItems) {\n        if (context.isPointInPath(item.path, event.offsetX, event.offsetY)) {\n          setSelectedItems(selectedItems.set(item.id, item));\n        }\n      }\n    },\n    [canvasItems, getCanvasContext, selectedItems]\n  );\n\n  const startDragging = useCallback(\n    (event: MouseEvent) => {\n      save();\n      setClickedCord([event.offsetX, event.offsetY]);\n      setDraggingState(true);\n      start();\n    },\n    [save, start]\n  );\n\n  useEffect(() => {\n    const { canvas } = getCanvasContext();\n\n    function onMouseMove(event: MouseEvent) {\n      if (isDragging) {\n        selectedItems.forEach((item) => {\n          item.moveItem(event.offsetX, event.offsetY);\n        });\n      }\n    }\n\n    function onMouseDown(event: MouseEvent) {\n      if (event.ctrlKey) {\n        return checkIfItemInLocation(\n          event,\n          (event: MouseEvent, item: CanvasItemModel) => {\n            setSelectedItems(selectedItems.set(item.id, item));\n            startDragging(event);\n          }\n        );\n      }\n      checkIfItemInLocation(\n        event,\n        (event: MouseEvent, item: CanvasItemModel) => {\n          const allItems = selectedItems.clear();\n          setSelectedItems(allItems.set(item.id, item));\n          startDragging(event);\n        },\n        () => {\n          setSelectedItems(selectedItems.clear());\n        }\n      );\n    }\n\n    function onMouseUp(event: MouseEvent) {\n      selectedItems.forEach((items) => items.clearClickStartingPoint());\n      setDraggingState(false);\n      stop();\n      setClickedCord([0, 0]);\n    }\n\n    canvas.addEventListener('mousedown', onMouseDown);\n    canvas.addEventListener('mouseup', onMouseUp);\n    canvas.addEventListener('mousemove', onMouseMove);\n\n    return function () {\n      window.clearInterval(rerenderInterval);\n      canvas.removeEventListener('mousedown', onMouseDown);\n      canvas.removeEventListener('mouseup', onMouseUp);\n      canvas.removeEventListener('mousemove', onMouseMove);\n    };\n  }, [\n    canvasItems,\n    clickedCord,\n    drawObjects,\n    getCanvasContext,\n    rerenderInterval,\n    save,\n    selectedItems,\n    setSelectedItems,\n    start,\n    stop,\n    isDragging,\n    handleAddOnClick,\n    checkIfItemInLocation,\n    startDragging\n  ]);\n\n  return (\n    <>\n      <div className={'canvas-container'}>\n        <canvas height={700} width={700} ref={canvasRef} {...rest} />\n      </div>\n      <div className={'buttons-container'}>\n        <button onClick={handleUndo}>Undo</button>\n        <button onClick={handleReset}>Reset</button>\n      </div>\n    </>\n  );\n}\n\nexport default Canvas;\n","function uuidv4(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nexport default uuidv4;\n","import { CanvasItemState } from '../types';\nimport uuidv4 from '../utills/uuidv4';\n\nclass CanvasItemModel {\n  private _xLoc: number;\n  private _yLoc: number;\n  private _scale: number = 1;\n  private _path: Path2D;\n  private readonly _color: string;\n  private readonly _id: string;\n  private _dClickX: number = 0\n  private _dClickY: number = 0\n\n  constructor(path: Path2D, x: number = 0, y: number = 0, color = 'black') {\n    this._path = path;\n    this._xLoc = x;\n    this._yLoc = y;\n    this._color = color;\n    this._movePath();\n    this._id = uuidv4();\n  }\n\n  get id(): string {\n    return this._id;\n  }\n\n  get color(): string {\n    return this._color;\n  }\n\n  get path(): Path2D {\n    return this._path;\n  }\n\n  get scale(): number {\n    return this._scale;\n  }\n\n  get xLoc(): number {\n    return this._xLoc;\n  }\n\n  get yLoc(): number {\n    return this._yLoc;\n  }\n\n  private _movePath(\n    x?: number,\n    y?: number,\n  ) {\n    const transformMatrix = new DOMMatrix();\n    transformMatrix.e = typeof x !== 'undefined' ? x - this._xLoc : this._xLoc;\n    transformMatrix.f = typeof y !== 'undefined' ? y - this._yLoc : this._yLoc;\n    transformMatrix.e -= this._dClickX;\n    transformMatrix.f -= this._dClickY;\n    const path = new Path2D();\n    path.addPath(this._path, transformMatrix);\n    this._path = path;\n  }\n\n  setClickStartingPoint(x:number, y:number) {\n    this._dClickX = x - this._xLoc;\n    this._dClickY = y - this._yLoc;\n  }\n\n  clearClickStartingPoint() {\n    this._dClickX = 0;\n    this._dClickY = 0;\n  }\n\n  moveItem(x: number, y: number,) {\n    this._movePath(x, y);\n    this._xLoc = x - this._dClickX;\n    this._yLoc = y - this._dClickY;\n  }\n\n  getState() {\n    return { xLoc: this._xLoc, yLoc: this._yLoc };\n  }\n\n  restoreState(state: CanvasItemState) {\n    this._movePath(state.xLoc, state.yLoc);\n    this._xLoc = state.xLoc;\n    this._yLoc = state.yLoc;\n  }\n}\n\nexport default CanvasItemModel;\n","import CanvasItemModel from './CanvasItemModel';\n\nconst rectang1 = new Path2D();\nrectang1.rect(0, 0, 100, 100);\nconst circl1 = new Path2D();\ncircl1.arc(50, 40, 50, 0, 2 * Math.PI);\nconst circl2 = new Path2D();\ncircl2.arc(0, 0, 70, 0, 2 * Math.PI);\nconst circl3 = new Path2D();\ncircl3.arc(0, 0, 70, 0,  Math.PI);\nconst eleps = new Path2D();\neleps.ellipse(0, 0, 30, 70, Math.PI / 4, 0, 2 * Math.PI);\nconst eleps2 = new Path2D();\neleps2.ellipse(0, 0, 60, 70, Math.PI / 2, 0, 2 * Math.PI);\n\nconst mockItems: CanvasItemModel[] = [\n  new CanvasItemModel(rectang1, 0, 0, 'red'),\n  new CanvasItemModel(circl1, 150, 150),\n  new CanvasItemModel(circl2, 200, 350, 'green'),\n  new CanvasItemModel(circl1, 500, 410, 'blue'),\n  new CanvasItemModel(eleps, 400, 400, 'orange'),\n  new CanvasItemModel(eleps2, 500, 500, 'darkcyan'),\n  new CanvasItemModel(circl3, 600, 10, 'yellow')\n];\n\nexport default mockItems\n","import './App.scss';\nimport Canvas from './Canvas';\nimport mockItems from './models/MockItems';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Canvas\n        items={mockItems}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}